AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sets up lambda, api and base path mapping to fetch most recent publication for an author
Parameters:
  CustomDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/api/domainName'
    Description: (Optional) Custom domain name for the API endpoint
  CustomDomainBasePath:
    Type: String
    Default: ''
    Description: (Optional) Base path mapping in CustomDomain
    AllowedPattern: "^[a-zA-Z0-9$\\-_.+!*'(),]*$"
    ConstraintDescription: "May contain only letters, numbers and one of $-_.+!*'(),"
  Stage:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'environment'
    Description: dev/test/prod

Conditions:
  HasDomainName: !Not [!Equals [!Ref CustomDomain, '']]
  HasCustomDomainBasePath: !Not [!Equals [!Ref CustomDomainBasePath, '']]

Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowMethods: '''OPTIONS, GET'''
      AllowOrigin: '''*'''
    EndpointConfiguration: REGIONAL

Resources:
  ExternalStubbApi:
    Type: AWS::Serverless::Api
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W64
            reason: "Skip access logging for artifacts bucket"
          - id: W68
            reason: "Skip encryption for artifacts bucket"
          - id: W69
            reason: "Skip bucket policy for artifacts bucket"
          - id: W89
            reason: "Lambda functions should be deployed inside a VPC"
          - id: W92
            reason: "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
    Properties:
      Name: !Sub "${AWS::StackName}"
      StageName: v1
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        openapi: 3.0.3
        info:
          title: External api stubbs
          version: '1.0'
        x-amazon-apigateway-request-validators:
          all:
            validateRequestBody: true
            validateRequestParameters: true
          params-only:
            validateRequestBody: false
            validateRequestParameters: true
          body-only:
            validateRequestBody: true
            validateRequestParameters: false
        paths:
          /stub/authority/rest/sru:
            get:
              summary: Get authority stubbing data
              description: Sends authority stubbing data
              consumes:
                - application/xml
              produces:
                - application/xml
              x-amazon-apigateway-request-validator : params-only
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAuthorityStubbDataFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              parameters:
                - in: query
                  name: query
                  type: string
                - in: query
                  name: operation
                  type: string
                  required: true
                - in: query
                  name: version
                  type: string
                  required: true
              responses:
                '200':
                  description: SRU stubbing data
                  content:
                    text/xml:
                      schema:
                        type: object
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '500':
                  description: Internal server error.
                  content:
                    application/json:
                      schema:
                        title: 500 internal server error
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
          /view/sru/{network}:
            get:
              summary: Get SRU stubbing data
              description: Sends SRU stubbing data
              consumes:
                - application/json
              produces:
                - application/xml
              x-amazon-apigateway-request-validator : params-only
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSRUStubbDataFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              parameters:
                - in: query
                  name: query
                  type: string
                  required: true
              responses:
                '200':
                  description: SRU stubbing data
                  content:
                    text/xml:
                      schema:
                        type: object
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '500':
                  description: Internal server error.
                  content:
                    application/json:
                      schema:
                        title: 500 internal server error
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
          /ncip:
            post:
              summary: Post ncip and receive mock response
              description: NCIP mock endpoint
              consumes:
                - application/xml
              produces:
                - application/xml
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostNcipStubbFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: NCIP ok status
                  content:
                    application/xml:
                      schema:
                        type: object
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '500':
                  description: Internal server error.
                  content:
                    application/json:
                      schema:
                        title: 500 internal server error
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
          /primo/v1/search:
            get:
              x-amazon-apigateway-request-validator : params-only
              summary: Get pnx stubbing data
              description: Gets pnx record stub
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: query
                  name: vid
                  required: true
                  type: string
                  description: The view ID, example BIBSYS
                - in: query
                  name: tab
                  required: true
                  type: string
                  description: The name of the tab. Ex. default_tab
                - in: query
                  name: scope
                  required: true
                  type: string
                  description: The scope name. Ex. default_scope
                - in: query
                  name: q
                  required: true
                  type: string
                  description: The query string. q=field,precision,value
                - in: query
                  name: lang
                  type: string
                  required: false
                  description: The language.
                - in: query
                  name: apikey
                  type: string
                  required: true
                  description: The api key used for accessing primo
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPrimoPnxStubbFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: primo pnx service mock
                  content:
                    text/xml:
                      schema:
                        type: object
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '500':
                  description: Internal server error.
                  content:
                    application/json:
                      schema:
                        title: 500 internal server error
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
          /basebibliotek/rest/bibnr/{identifier}:
            get:
              summary: Get basebibliotek stubbing data
              description: Sends basebibliotek stubbing data
              consumes:
                - application/json
              produces:
                - text/xml
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetBaseBibliotekStubbDataFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: Basebibliotek stubbing data
                  content:
                    text/xml:
                      schema:
                        type: object
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '500':
                  description: Internal server error.
                  content:
                    application/json:
                      schema:
                        title: 500 internal server error
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message

  GetSRUStubbDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Handler: "stub_api/sru_handler.sru_handler"
      Runtime: python3.12
      MemorySize: 1024
      Events:
        PutEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ExternalStubbApi
            Method: get
            Path: /view/sru/{network}

  PostNcipStubbFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          STAGE: !Ref Stage
      Handler: "stub_api/ncip_handler.handler_pnx_sender"
      Runtime: python3.12
      MemorySize: 1024
      Events:
        GetInterLibraryLoanMetadataRecordEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ExternalStubbApi
            Method: post
            Path: /ncip
      Timeout: 60

  GetPrimoPnxStubbFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          STAGE: !Ref Stage
      Handler: "stub_api/pnxHandler.handler_pnx_sender"
      Runtime: python3.12
      MemorySize: 1024
      Events:
        GetInterLibraryLoanMetadataRecordEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ExternalStubbApi
            Method: get
            Path: /primo/v1/search
      Timeout: 60

  GetBaseBibliotekStubbDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          ALLOWED_ORIGIN:  '*'
      Handler: "stub_api/baseBibliotekHandler.handler_basebibliotek_sender"
      Runtime: python3.12
      MemorySize: 1024
      Events:
        PutEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ExternalStubbApi
            Method: get
            Path: /basebibliotek/rest/bibnr/{identifier}

  GetAuthorityStubbDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Handler: "stub_api/authority_handler.handler_authority_sender"
      Runtime: python3.12
      MemorySize: 1024
      Events:
        PutEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ExternalStubbApi
            Method: get
            Path: /stub/authority/rest/sru

  ExternalStubbBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasDomainName
    Properties:
      BasePath: !If
        - HasCustomDomainBasePath
        - !Ref CustomDomainBasePath
        - !Ref 'AWS::NoValue'
      DomainName: !Ref CustomDomain
      RestApiId: !Ref ExternalStubbApi
      Stage: !Ref ExternalStubbApi.Stage

Outputs:
  ApiEndpoint:
    Description: "Endpoint base URL for the API"
    Value: !If
      - HasDomainName
      - !Sub "https://${CustomDomain}/${CustomDomainBasePath}"
      - !Sub "https://${ExternalStubbApi}.execute-api.${AWS::Region}.amazonaws.com/${ExternalStubbApi.Stage}/"
